From 1050f1662709235ef7e1569712525dd3eb2399c3 Mon Sep 17 00:00:00 2001
From: 313551118 <313551118@gmail.com>
Date: Tue, 24 Sep 2024 10:52:53 +0800
Subject: [PATCH] finish

---
 arch/x86/entry/syscalls/syscall_64.tbl |  2 +-
 include/linux/syscalls.h               |  4 ++-
 kernel/Makefile                        |  1 +
 kernel/revstr.c                        | 46 ++++++++++++++++++++++++++
 4 files changed, 51 insertions(+), 2 deletions(-)
 create mode 100644 kernel/revstr.c

diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index c84d12608..111341f58 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -372,7 +372,7 @@
 448	common	process_mrelease	sys_process_mrelease
 449	common	futex_waitv		sys_futex_waitv
 450	common	set_mempolicy_home_node	sys_set_mempolicy_home_node
-
+451     common  revstr                  sys_revstr
 #
 # Due to a historical design error, certain syscalls are numbered differently
 # in x32 as compared to native x86_64.  These syscalls have numbers 512-547.
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index a34b0f9a9..4abb83579 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1268,7 +1268,7 @@ asmlinkage long sys_mmap_pgoff(unsigned long addr, unsigned long len,
 			unsigned long prot, unsigned long flags,
 			unsigned long fd, unsigned long pgoff);
 asmlinkage long sys_old_mmap(struct mmap_arg_struct __user *arg);
-
+asmlinkage long sys_revstr(void);
 
 /*
  * Not a real system call, but a placeholder for syscalls which are
@@ -1276,6 +1276,8 @@ asmlinkage long sys_old_mmap(struct mmap_arg_struct __user *arg);
  */
 asmlinkage long sys_ni_syscall(void);
 
+
+
 #endif /* CONFIG_ARCH_HAS_SYSCALL_WRAPPER */
 
 
diff --git a/kernel/Makefile b/kernel/Makefile
index d754e0be1..b5c6b10b3 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -11,6 +11,7 @@ obj-y     = fork.o exec_domain.o panic.o \
 	    kthread.o sys_ni.o nsproxy.o \
 	    notifier.o ksysfs.o cred.o reboot.o \
 	    async.o range.o smpboot.o ucount.o regset.o
+obj-y += revstr.o
 
 obj-$(CONFIG_USERMODE_DRIVER) += usermode_driver.o
 obj-$(CONFIG_MODULES) += kmod.o
diff --git a/kernel/revstr.c b/kernel/revstr.c
new file mode 100644
index 000000000..addb9805b
--- /dev/null
+++ b/kernel/revstr.c
@@ -0,0 +1,46 @@
+#include <linux/kernel.h>
+#include <linux/syscalls.h>
+#include <linux/uaccess.h>  // for copy_from_user and copy_to_user
+#include <linux/string.h>   // for strlen
+
+SYSCALL_DEFINE2(revstr, char __user *, str, int, len)
+{
+    char k_str[256];  // 假設最大字串長度為 256，這可以根據需要調整
+    char temp;
+    int i;
+    
+    // 檢查長度
+    if (len < 0 || len > 255) {
+        printk(KERN_ERR "Invalid string length: %d\n", len);
+        return -EINVAL;  // 返回錯誤，表示參數無效
+    }
+
+    // 將字串從用戶空間複製到內核空間
+    if (copy_from_user(k_str, str, len)) {
+        printk(KERN_ERR "Failed to copy string from user space\n");
+        return -EFAULT;  // 返回錯誤，表示無法複製資料
+    }
+    k_str[len] = '\0';  // 確保字串是以 null 結尾的
+
+    // 輸出原始字串到內核日誌
+    printk(KERN_INFO "The origin string: %s\n", k_str);
+
+    // 反轉字串
+    for (i = 0; i < len / 2; i++) {
+        temp = k_str[i];
+        k_str[i] = k_str[len - i - 1];
+        k_str[len - i - 1] = temp;
+    }
+
+    // 輸出反轉後的字串到內核日誌
+    printk(KERN_INFO "The reversed string: %s\n", k_str);
+
+    // 將反轉後的字串複製回用戶空間
+    if (copy_to_user(str, k_str, len)) {
+        printk(KERN_ERR "Failed to copy reversed string to user space\n");
+        return -EFAULT;
+    }
+
+    return 0;  // 成功返回 0
+}
+
-- 
2.43.0

